#!/usr/bin/env bash
# Copyright (c) 2020 The Toltec Contributors
# SPDX-License-Identifier: MIT

set -e
source scripts/package-lib

usage="$0 [OPTION]... RECIPEDIR WORKDIR [PACKAGENAME]...

Build all the packages defined in RECIPEDIR.
If PACKAGENAMEs are given, only build the listed packages.
The builds are carried out in subdirectories of WORKDIR.

Arguments:

    -h              Show this help message."

helpflag=

while getopts h name; do
    case $name in
        h) helpflag=1 ;;
        *) error "Invalid option. Use the -h flag for more information." ;;
    esac
done

shift $((OPTIND - 1))

if [[ -n $helpflag ]]; then
    echo "$usage"
    exit
fi

if [[ $# -eq 0 ]]; then
    error "Missing RECIPEDIR and WORKDIR arguments. Use the -h flag for more information."
fi

if [[ $# -eq 1 ]]; then
    error "Missing WORKDIR argument. Use the -h flag for more information."
fi

# Load common package info and create working directories
readonly recipedir="$1"
load-recipe-header "$1"
shift

readonly workdir="$1"
[[ -d $workdir ]] && files="$(ls -qA -- "$workdir")" && [[ -n $files ]] \
    && error "Working directory '$workdir' exists and is not empty"
mkdir -p "$workdir"
shift

readonly requestedpkgs=("$@")

readonly srcdir="$workdir/src"
mkdir "$srcdir"

# Use the declared timestamp as SOURCE_DATE_EPOCH
# See <https://reproducible-builds.org/docs/source-date-epoch/>
SOURCE_DATE_EPOCH="$(date --date="$timestamp" +%s)"
export SOURCE_DATE_EPOCH

# Fetch source files
section "Fetching source files"

for ((i = 0; i < ${#source[@]}; ++i)); do
    srcurl="${source[i]}"
    checksum="${sha256sums[i]}"

    if [[ ! $srcurl =~ ^[[:lower:]]+:// ]]; then
        srcurl="file://$(realpath "$recipedir"/"$srcurl")"
    fi

    srcfile="$(basename "$srcurl")"
    srcfilepath="$srcdir/$srcfile"
    status "$srcfile"

    rcurl --location "$srcurl" -o "$srcfilepath"

    # Verify checksum if one was provided
    if [[ $checksum != SKIP ]] \
        && ! sha256sum -c <(echo "$checksum  $srcfilepath") > /dev/null 2>&1; then
        error "Checksum mismatch while fetching $srcfile"
    fi

    # Automatically extract source archives
    if ! has-element "$srcfile" "${noextract[@]}"; then
        if [[ $srcfilepath =~ \.(zip|tar\.gz|tar\.xz|tar\.bz)$ ]]; then
            bsdtar -x \
                --strip-components "$(tarprefix "$srcfilepath")" \
                --directory "$srcdir" \
                --file "$srcfilepath"
        fi
    fi
done

if [[ $(type -t prepare) == "function" ]]; then
    section "Preparing source files"
    prepare
fi

# Set atime and mtime to the SOURCE_DATE_EPOCH for all source files
find "$srcdir" -exec touch --no-dereference --date="@${SOURCE_DATE_EPOCH}" {} +

# Run the build script inside a Docker container
if [[ -n $image ]]; then
    if [[ $(type -t build) != "function" ]]; then
        error "The 'build()' function is not defined"
    fi

    section "Building binaries"
    docker container run --interactive --rm \
        --mount type=bind,src="$(realpath "$recipedir")",dst=/recipe \
        --mount type=bind,src="$(realpath "$srcdir")",dst=/src \
        "$(image-name "$image")" /bin/bash \
        << SCRIPT
source /recipe/package
cd /src
build
chown -R $(id -u):$(id -u) /src/
SCRIPT
elif [[ $(type -t build) == "function" ]]; then
    error "A 'build()' function was defined but the 'image' variable is missing"
fi

# Build all requested packages, or all defined packages if none were requested
# Each package is built in a subshell to avoid leaking metadata fields
for pkgname in "${pkgnames[@]}"; do
    if [[ ${#requestedpkgs[@]} -eq 0 ]] \
        || has-element "$pkgname" "${requestedpkgs[@]}"; then
        (
            section "Packaging $pkgname"
            load-recipe-pkg "$pkgname"

            # Prepare working directories
            readonly worksubdir="$workdir/$pkgname"
            mkdir "$worksubdir"

            readonly pkgdir="$worksubdir"/pkg
            mkdir "$pkgdir"

            readonly ctldir="$worksubdir"/control
            mkdir "$ctldir"

            readonly ardir="$worksubdir"/ar
            mkdir "$ardir"

            # Run packaging script
            package

            # Show package contents
            if command -v tree &> /dev/null; then
                tree -np "$pkgdir" | tail +2
            fi

            # Create control file
            readonly ctlfile="$ctldir"/control

            {
                echo "Package: $pkgname"
                echo "Description: $pkgdesc"
                echo "Homepage: $url"
                echo "Version: $pkgver"
                echo "Section: $section"
                echo "Maintainer: $maintainer"
                echo "License: $license"
                echo "Architecture: $arch"
                [[ -n $depends ]] && echo "Depends: $(join-elements ", " "${depends[@]}")"
                [[ -n $conflicts ]] && echo "Conflicts: $(join-elements ", " "${conflicts[@]}")"
            } >> "$ctlfile"

            # Create maintainer scripts
            maintainer-script-header() {
                cat << 'SCRIPT'
#!/usr/bin/env bash
set -e
SCRIPT
                dump-fields
                cat scripts/install-lib
            }

            # Generate preinst
            if [[ $(type -t preinstall) = function ]]; then
                {
                    maintainer-script-header
                    declare -f preinstall
                    cat << 'SCRIPT'
if [[ $1 = install ]]; then
    preinstall
fi
SCRIPT
                } >> "$ctldir"/preinst
                chmod 755 "$ctldir"/preinst
            fi

            # Generate postinst
            if [[ $(type -t configure) = function ]]; then
                {
                    maintainer-script-header
                    declare -f configure
                    cat << 'SCRIPT'
if [[ $1 = configure ]]; then
    configure
fi
SCRIPT
                } >> "$ctldir"/postinst
                chmod 755 "$ctldir"/postinst
            fi

            # Generate {pre,post}rm
            for step in pre post; do
                if [[ $(type -t "$step"upgrade) = function ]] \
                    || [[ $(type -t "$step"remove) = function ]]; then
                    {
                        maintainer-script-header

                        if [[ $(type -t "$step"upgrade) = function ]]; then
                            declare -f "$step"upgrade
                            cat << SCRIPT
if [[ \$1 = upgrade ]]; then
    "$step"upgrade
fi
SCRIPT
                        fi

                        if [[ $(type -t "$step"remove) = function ]]; then
                            declare -f "$step"remove
                            cat << SCRIPT
if [[ \$1 = remove ]]; then
    "$step"remove "\$2"
fi
SCRIPT
                        fi
                    } >> "$ctldir"/"$step"rm
                    chmod 755 "$ctldir"/"$step"rm
                fi
            done

            # Create archives
            section "Creating archive"
            readonly pkgar="$ardir"/data.tar.gz
            readonly ctlar="$ardir"/control.tar.gz
            readonly versionar="$ardir"/debian-binary
            readonly arar="$worksubdir/$(package-id).ipk"

            echo "2.0" >> "$versionar"
            rtar "$pkgar" "$pkgdir"
            rtar "$ctlar" "$ctldir"
            rtar "$arar" "$ardir"

            # Set atime and mtime to the SOURCE_DATE_EPOCH for the final archive
            touch --no-dereference --date="@$SOURCE_DATE_EPOCH" "$arar"
        )
    fi
done
