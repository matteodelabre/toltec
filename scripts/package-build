#!/usr/bin/env bash

set -e
source scripts/lib

usage="$0 [OPTION]... RECIPEDIR WORKDIR

Build a package following the recipe defined in RECIPEDIR.
The WORKDIR must be a non-existent directory in which the build is performed.

Arguments:

    -h              Show this help message."

helpflag=

while getopts h name; do
    case $name in
        h) helpflag=1 ;;
        *) error "Invalid option. Use the -h flag for more information." ;;
    esac
done

shift $((OPTIND - 1))

if [[ -n $helpflag ]]; then
    echo "$usage"
    exit
fi

if [[ $# -eq 0 ]]; then
    error "Missing RECIPEDIR and WORKDIR arguments. Use the -h flag for more information."
fi

if [[ $# -eq 1 ]]; then
    error "Missing WORKDIR argument. Use the -h flag for more information."
fi

if [[ $# -gt 2 ]]; then
    error "Extraneous arguments. Use the -h flag for more information."
fi

recipedir="$1"
workdir="$2"

# Create working directories
[[ -d $workdir ]] && files="$(ls -qA -- "$workdir")" && [[ -n $files ]] \
    && error "Working directory '$workdir' exists and is not empty"
mkdir -p "$workdir"

srcdir="$workdir"/src
mkdir "$srcdir"

pkgdir="$workdir"/pkg
mkdir "$pkgdir"

ctldir="$workdir"/control
mkdir "$ctldir"

ardir="$workdir"/ar
mkdir "$ardir"

# Load package info and script
load-recipe "$recipedir"

# Use the declared timestamp as SOURCE_DATE_EPOCH
# See <https://reproducible-builds.org/docs/source-date-epoch/>
SOURCE_DATE_EPOCH="$(date --date="$timestamp" +%s)"
export SOURCE_DATE_EPOCH

# Fetch source files
section "Fetching source files"

for (( i=0; i < ${#source[@]}; ++i )); do
    srcurl="${source[i]}"
    checksum="${sha256sums[i]}"

    if [[ ! $srcurl =~ ^[[:lower:]]+:// ]]; then
        srcurl="file://$(realpath "$recipedir"/"$srcurl")"
    fi

    srcfile="$(basename "$srcurl")"
    status "$srcfile"

    rcurl --location "$srcurl" -o "$srcdir"/"$srcfile"

    if [[ $checksum != SKIP ]] && \
            ! sha256sum -c <(echo "$checksum $srcdir/$srcfile") > /dev/null 2>&1; then
        error "Checksum mismatch while fetching $srcfile"
    fi

    if [[ $srcdir/$srcfile =~ \.(zip|tar\.gz)$ ]]; then
        bsdtar -x \
            --strip-components 1 \
            --directory "$srcdir" \
            --file "$srcdir"/"$srcfile"
    fi
done

# Set atime and mtime to the SOURCE_DATE_EPOCH for all source files
find "$srcdir" -exec touch --no-dereference --date="@${SOURCE_DATE_EPOCH}" {} +

# Run build script inside a Docker container
if [[ -n $image ]]; then
    section "Building binaries"
    docker container run --interactive --rm \
        --mount type=bind,src="$(realpath "$recipedir")",dst=/recipe \
        --mount type=bind,src="$(realpath "$srcdir")",dst=/src \
        "$(image-name "$image")" /bin/bash \
    <<CMDS
        source /recipe/package
        cd /src
        build
        chown -R $(id -u):$(id -u) /src/
CMDS
fi

# Run packaging script
section "Preparing package files"
package

# Create control file
ctlfile="$ctldir"/control

{
    echo "Package: $pkgname"
    echo "Description: $pkgdesc"
    echo "Homepage: $url"
    echo "Version: $pkgver"
    echo "Section: $section"
    echo "Maintainer: $maintainer"
    echo "License: $license"
    echo "Architecture: $arch"
    [[ -n $depends ]] && echo "Depends: $depends"
    [[ -n $conflicts ]] && echo "Conflicts: $conflicts"
} >> "$ctlfile"

# Create maintainer scripts
genscript() {
    cat <(printf "#!/usr/bin/env bash\nset -e\n") \
        "$recipedir/package" - \
        > "$ctldir"/"$1"
    chmod 755 "$ctldir"/"$1"
}

genscript preinst <<SCRIPT
if [[ \$1 = install ]] && [[ \$(type -t preinstall) = function ]]; then
    preinstall
fi
SCRIPT

for step in pre post; do
    genscript "$step"rm <<SCRIPT
if [[ \$1 = remove ]] && [[ \$(type -t "$step"remove) = function ]]; then
    "$step"remove
fi

if [[ \$1 = upgrade ]] && [[ \$(type -t "$step"upgrade) = function ]]; then
    "$step"upgrade "\$2"
fi
SCRIPT
done

genscript postinst <<SCRIPT
if [[ \$1 = configure ]] && [[ \$(type -t configure) = function ]]; then
    configure
fi
SCRIPT

# Show package contents
if command -v tree &> /dev/null; then
    tree -np "$pkgdir" | tail +2
fi

# Create archives
section "Creating archives"
pkgar="$ardir"/data.tar.gz
ctlar="$ardir"/control.tar.gz
versionar="$ardir"/debian-binary
arar="$workdir/$(archive-name "$recipedir")"

echo "2.0" >> "$versionar"
rtar "$pkgar" "$pkgdir"
rtar "$ctlar" "$ctldir"
rtar "$arar" "$ardir"

# Set atime and mtime to the SOURCE_DATE_EPOCH for the final archive
touch --no-dereference --date="@$SOURCE_DATE_EPOCH" "$arar"

section "Done. Result is in $arar"
