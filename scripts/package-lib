# vim: set ft=sh:

#
# package-lib
#
# Common functions used by the packaging scripts
#

# Allow using colors when inside a terminal
[[ -t 1 ]] && setbold="$(tput bold)"
[[ -t 1 ]] && setred="$(tput setaf 1)"
[[ -t 1 ]] && setgreen="$(tput setaf 2)"
[[ -t 1 ]] && reset="$(tput sgr0)"

# Print an error message to error output then exit
#
# Arguments:
#
# $1 - Error message to print
error() {
    echo "$setbold$setred==> ERROR:$reset$setbold $1$reset" >&2
    exit 1
}

# Start a section
#
# Arguments:
#
# $1 - Section name
section() {
    echo "$setbold$setgreen==>$reset$setbold $1$reset" >&2
}

# Print a status message
#
# Arguments:
#
# $1 - Status message
status() {
    echo "$1" >&2
}

# Make a reproducible tar archive for a directory
# See <https://reproducible-builds.org/docs/archives/>
#
# Arguments:
#
# $1 - Name of the resulting archive file
# $2 - Path to the directory to archive
rtar() {
    tar --sort=name \
        --owner=0 --group=0 --numeric-owner \
        --mtime="@${SOURCE_DATE_EPOCH}" \
        --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime \
        --create --file - --directory "$2" . \
        | gzip -9 --no-name - > "$1"
}

# Recursively compares two files, entering inside tar archives when possible
#
# Arguments:
#
# $1 - First file or tar archive to compare
# $2 - Second file or tar archive to compare
# $3 (optional) - Display name for the first file
# $4 (optional) - Display name for the second file
#
# Exit code:
#
# 0 if no difference, 1 if there is a difference
tardiff() {
    label1="${3:-$1}"
    label2="${4:-$2}"

    # Compare non-archive files
    if ! tar -tf "$1" > /dev/null 2>&1; then
        if ! diff=$(diff "$1" --label "$label1" "$2" --label "$label2"); then
            echo "Files $label1 and $label2 differ:"
            echo "$diff"
            return 1
        fi
    # Compare tar archives
    else
        # See if they are equal byte to byte
        if diff "$1" "$2" > /dev/null 2>&1; then
            return 0
        fi

        # See if they contain the same files
        if ! diff=$(diff <(tar -tf "$1") <(tar -tf "$2")); then
            echo "Archives $label1 and $label2 contain different files:"
            echo "$diff"
            return 1
        fi

        # See if each file pair is identical
        while IFS= read -r subfile; do
            subfile1="$(mktemp)"
            subfile2="$(mktemp)"

            tar -xf "$1" "$subfile" -O > "$subfile1"
            tar -xf "$2" "$subfile" -O > "$subfile2"

            (tardiff \
                "$subfile1" "$subfile2" \
                "$label1" "$label2 -> $subfile")
            rm "$subfile1" "$subfile2"
        done < <(tar -tf "$1" | grep -e "[^/]$")
    fi
}

# Curl command with flags suitable for scripting
rcurl() {
    curl --fail --silent --tlsv1.2 "$@"
}

# Curl command with flags suitable for scripting, restricted to HTTPS
rsecurl() {
    rcurl --proto '=https' "$@"
}

# Load metadata and functions defined in a package recipe
#
# Arguments:
#
# $1 - Path to the package recipe
load-recipe() {
    source "$1"/package

    [[ -z $pkgname ]] && error "Missing or empty 'pkgname' field"
    [[ -z $pkgdesc ]] && error "Missing or empty 'pkgdesc' field"
    [[ -z $url ]] && error "Missing or empty 'url' field"
    [[ -z $pkgver ]] && error "Missing or empty 'pkgver' field"
    [[ -z $timestamp ]] && error "Missing or empty 'timestamp' field"
    [[ -z $section ]] && error "Missing or empty 'section' variable"
    [[ -z $maintainer ]] && error "Missing or empty 'maintainer' variable"
    [[ -z $license ]] && error "Missing or empty 'license' variable"
    [[ -z $arch ]] && arch=armv7-3.2

    [[ -z $source ]] && error "Missing or empty 'source' variable"
    [[ -z $sha256sums ]] && error "Missing or empty 'sha256sums' variable"

    return 0
}

# Dump metadata of a package recipe that is currently loaded
dump-metadata() {
    declare -p \
        pkgname \
        pkgdesc \
        url \
        pkgver \
        timestamp \
        section \
        maintainer \
        license \
        depends \
        arch \
        conflicts \
        image \
        source \
        sha256sums \
    2>/dev/null || true
}

# Generate the archive name of a package
#
# Arguments:
#
# $1 - Path to the package recipe
archive-name() {
    (load-recipe "$1"
     echo "${pkgname}_${pkgver}_${arch}.ipk")
}

# Get the full tag of a Docker image
#
# Arguments:
#
# $1 - Name and version of the image (e.g. qt:v1.0)
image-name() {
    echo "ghcr.io/toltec-dev/$1"
}
