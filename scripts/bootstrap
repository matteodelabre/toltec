#!/usr/bin/env bash

#
# bootstrap
#
# Install and configure Opkg for use with Entware and Toltec
#

cleanup() {
    if [ -d /home/root/.cache/wget_bin ]; then
        rm -r /home/root/.cache/wget_bin \
            && log DEBUG "Removed wget binary cache"
    fi
}

bootstrap_wget() {
    if [ ! -d /home/root/.cache/wget_bin ]; then
        if [ -e /home/root/.cache/wget_bin ]; then
            log FATAL '"/home/root/.cache/wget_bin" exists, but is not a directory!'
        fi

        log INFO "Installing a current wget binary with better and current tls support" \
            "to /home/root/.cache/wget_bin/ for this installation..." \
            ""
        # Bootstrap a current version of wget
        local wget_binaries_path='http://github.com/LinusCDE/wget-remarkable-pipeline/releases/download/job254'
        local wget_binaries_filename='wget-remarkable-pipeline_job245_wget1.20.3.zip'
        local wget_binaries_sha256='84185a5934e34e25794d439c78dc9f1590e4df12fbf369236f6a8749bf14d67f'

        # Download and compare to hash
        wget "$wget_binaries_path/$wget_binaries_filename" -O "/home/root/$wget_binaries_filename"
        if ! echo "$wget_binaries_sha256  /home/root/$wget_binaries_filename" | sha256sum -c -; then
            echo "FATAL: Invalid hash" >&2
            exit 1
        fi

        mkdir -p /home/root/.cache/wget_bin

        # Unzip to /home/root/.cache/wget_bin and remove downloaded file
        unzip "/home/root/$wget_binaries_filename" -d /home/root/.cache/wget_bin -q
        rm "/home/root/$wget_binaries_filename"

        cat > /home/root/.cache/wget_bin/wget << EOF
#!/bin/sh
LD_LIBRARY_PATH="/home/root/.cache/wget_bin/dist" /home/root/.cache/wget_bin/dist/wget \$@
EOF

        chmod +x /home/root/.cache/wget_bin/wget
    fi

    # Ensure this binary is used
    if [[ $(command -v wget) != /home/root/.cache/wget_bin/wget ]]; then
        PATH="/home/root/.cache/wget_bin:$PATH"
    fi
}

main() {
    # Allow changing the default branch
    [[ -n "$TOLTEC_BRANCH" ]] || TOLTEC_BRANCH="stable"

    # Select source for remarkable_entware repo
    if [ -z "$REMARKABLE_ENTWARE_REPO_AUTHOR" ]; then
        # Use LinusCDE's fork for the time beeing
        # TODO: Switch to a more official repo when it exists
        REMARKABLE_ENTWARE_REPO_AUTHOR=LinusCDE
    fi

    # Check status of installation and ensure installed
    if [ -d /home/root/.entware ]; then
        if [[ -d /opt ]] && files="$(ls -qA -- /opt)" && [[ -n $files ]]; then
            # Entware is installed and active
            log INFO "Entware is installed and active"
        else
            # Installed but not active
            log INFO "Entware is installed but not reenabled"
            entware_reenable
        fi
    else # = not found: /home/root/.entware
        # Not installed at all
        log INFO "Entware is not installed"
        entware_install
    fi

    # Ensure opkg is in PATH
    ensure_opkg_available
    # Ensure wget is installed as opkg package
    ensure_opt_wget_and_ca_certs_installed
    # Add toltec repo if mising
    ensure_toltec_repo_added

    if [ $# -ge 1 ]; then
        install_packages "$@" || throw "Failed to install requested packages"
    fi

    cleanup
}

entware_install() {
    bootstrap_wget || throw "bootstrap_wget() failed!"
    (wget -O- "https://raw.githubusercontent.com/$REMARKABLE_ENTWARE_REPO_AUTHOR/remarkable_entware/master/entware_install.sh" | sh) \
        || throw "Failed to download and/or install remarkable_entware."
    log INFO "Entware was installed successfully."
}

entware_reenable() {
    bootstrap_wget || throw "bootstrap_wget() failed!"
    (wget -O- "https://raw.githubusercontent.com/$REMARKABLE_ENTWARE_REPO_AUTHOR/remarkable_entware/master/entware_reenable.sh" | sh) \
        || throw "Failed to download and/or install remarkable_entware."
    log INFO "Entware was reenabled successfully."
}

ensure_opkg_available_from_bashrc() {
    # Run by ensure_opkg_available
    if ! grep '.*PATH=.*/opt/bin.*' /home/root/.bashrc | grep -v '^#' > /dev/null; then
        # Path is not in .bashrc
        echo -e '\n# Path added by bootstrap.sh' >> /home/root/.bashrc
        # shellcheck disable=SC2016
        {
            echo 'PATH="/opt/bin:/opt/sbin:$PATH"' >> /home/root/.bashrc
            log WARN '/opt/bin and /opt/sbin were not added to $PATH in ~/.bashrc. Fixed automatically.'
        }
    fi
}

ensure_opkg_available() {
    if command -v opkg &> /dev/null; then # opkg command not found
        export PATH="/opt/bin/:/opt/sbin/:$PATH"
        local messages
        messages="$(ensure_opkg_available_from_bashrc)"
        if [[ -n $messages ]]; then
            echo "$messages" # Print the caught output
            log WARN "Please re-connect to your reMarkable after this" \
                "script is finished. Otherwise opkg and other" \
                "installed binaries won't be recognized!"
        fi
    else
        ensure_opkg_available_from_bashrc
    fi
}

ensure_toltec_repo_added() {
    if ! grep "^src/gz\b.*\bhttps://toltec\.delab\.re/" /opt/etc/opkg.conf > /dev/null 2>&1; then
        # No active toltec repo found in opkg.conf
        echo "src/gz toltec https://toltec.delab.re/$TOLTEC_BRANCH" >> /opt/etc/opkg.conf
        opkg update || throw "Failed to update opkg after adding toltec $TOLTEC_BRANCH repo"
        log INFO "Added the toltec $TOLTEC_BRANCH repo to opkg"
    fi
}

ensure_opt_wget_and_ca_certs_installed() {
    # Those packages might miss if someone had already
    # installed entware before.
    local packages=()
    [ -d /opt/etc/ssl/certs ] || packages+=(ca-certificates)
    [ -f /opt/bin/wget ] || packages+=(wget)

    if [[ ${#packages[@]} -gt 0 ]]; then
        if ! opkg update || ! opkg install "${packages[@]}"; then
            throw "Failed to install packages for better https support"
        fi
        log INFO "Installed missing recommended packages for better https support"
    fi
}

install_packages() {
    [ $# -eq 0 ] && return

    if [ $# -eq 1 ]; then
        log INFO "Installing package: $1"
    else
        log INFO "Installing packages: $*"
    fi

    opkg install "$@"
}

log() {
    [ $# -ge 2 ] || throw "log() invalid usage: at least 2 parameters needed. Usage: log <type> <message_line>..."

    local log_type="$1"
    local fd=1 # To stdout
    local colored_prefix

    case "$log_type" in
        'info' | 'INFO' | 'Info') colored_prefix='\e[32mINFO:\e[0m  ' ;;
        'warn' | 'WARN' | 'Warn') colored_prefix='\e[33mWARN:\e[0m  ' ;;
        'error' | 'ERROR' | 'Error')
            colored_prefix='\e[31mERROR:\e[0m '
            fd=2
            ;;
        'fatal' | 'FATAL' | 'Fatal')
            colored_prefix='\e[31mFATAL:\e[0m '
            fd=2
            ;;
        *) throw "log() invalid usage: Unknown type: $log_type" ;;
    esac

    echo -e "${colored_prefix}$2" >&$fd
    # Extra lines to print indented
    shift 2
    local line
    for line in "$@"; do
        echo -e "       $line" >&$fd
    done
}

throw() {
    # Fatal error and quit
    log FATAL "$@" \
        "" \
        "This script failed to install. If you can't solve the above" \
        "reason yourself, create an issue and tag @LinusCDE here: " \
        "https://github.com/toltec-dev/toltec/issues" \
        "(Please also include these error logs to help solving the" \
        "problem faster. Thank you!)"
    cleanup
    exit 1
}

main "$@"
