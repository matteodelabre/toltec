#!/usr/bin/env bash

#
# bootstrap
#
# Install and configure Opkg for use with Entware and Toltec
#
# Based on Evan Widloski’s remarkable_entware (2019-03-21)
# Based on the Entware installer from
# <http://bin.entware.net/armv7sf-k3.2/installer/generic.sh>
#

set -e

# Path for the temporary local wget used in this installer
[[ -z $wget_path ]] && wget_path=/home/root/.local/bin/wget

# Path for the systemd unit that mounts Entware to /opt
[[ -z $systemd_mount_path ]] && systemd_mount_path=/lib/systemd/system/opt.mount

# Path where the actual Entware distribution resides (will be mounted to /opt)
[[ -z $entware_path ]] && entware_path=/home/root/.entware

# Path where the re-enable script is written
[[ -z $reenable_path ]] && reenable_path=/home/root/entware-reenable

# Toltec branch to use for this install - you almost always want 'stable'
[[ -z $toltec_branch ]] && toltec_branch="stable"

# Remove all temporary files
cleanup() {
    if [[ -e $wget_path ]]; then
        rm "$wget_path"
    fi
}

trap cleanup EXIT

# Remove unfinished installation after error
error-cleanup() {
    # Get out of /opt so it can be unmounted
    cd /home/root

    if [[ -d /opt ]]; then
        umount /opt
        rm /opt -rf
    fi

    if [[ -d $entware_path ]]; then
        rm -rf "$entware_path"
    fi

    if [[ -f $systemd_mount_path ]]; then
        systemctl disable opt.mount
        rm "$systemd_mount_path"
        systemctl daemon-reload
    fi
}

trap error-cleanup ERR

# Install a local wget binary which supports TLS (the original one
# installed on the reMarkable does not) in the PATH
wget-bootstrap() {
    local wget_remote=https://toltec.delab.re/thirdparty/bin/wget-v1.20.3
    local wget_checksum=8d447c6eb0a39e705f45bea900b12eef07142ea3da0809aca4dd44fe4110cdfd

    if [[ ! -x $wget_path ]]; then
        if [[ -e $wget_path ]]; then
            throw "'$wget_path' exists, but is not executable"
        fi

        # Download and compare to hash
        mkdir -p "$(dirname "$wget_path")"
        touch "$wget_path"
        chmod +x "$wget_path"

        wget --quiet "$wget_remote" --output-document "$wget_path" 2> /dev/null

        if ! sha256sum -c <(echo "$wget_checksum  $wget_path") > /dev/null 2>&1; then
            throw "Invalid checksum for the local wget binary"
            rm "$wget_path"
        fi
    fi

    # Ensure the local binary is used
    if [[ $(command -v wget) != "$wget_path" ]]; then
        export PATH
        PATH="$(dirname "$wget_path"):$PATH"
    fi
}

# Mount Entware to /opt
entware-mount() {
    mkdir -p /opt
    mkdir -p "$entware_path"

    # Create systemd mount unit to mount over /opt on reboot
    cat > "$systemd_mount_path" << UNIT
[Unit]
Description=Bind mount Entware over /opt
DefaultDependencies=no
Conflicts=umount.target
Before=local-fs.target umount.target

[Mount]
What=/home/root/.entware
Where=/opt
Type=none
Options=bind

[Install]
WantedBy=local-fs.target
UNIT

    systemctl daemon-reload
    systemctl enable --now opt.mount
}

# Install Entware to /opt
entware-install() {
    # Create basic folders, entware-opt package creates the rest
    log INFO "Initializing /opt"

    for folder in bin etc lib lib/opkg tmp var var/lock; do
        if [ -d "/opt/$folder" ]; then
            log WARN "Folder /opt/$folder exists!"
            log WARN "If something goes wrong please clean the /opt folder and try again."
        else
            mkdir "/opt/$folder"
        fi
    done

    log INFO "Installing Entware to /opt"
    local dynamic_loader="ld-linux.so.3"
    local entware_remote=https://bin.entware.net/armv7sf-k3.2/installer

    wget --quiet "$entware_remote/opkg" -O /opt/bin/opkg
    chmod 755 /opt/bin/opkg
    wget --quiet "$entware_remote/opkg.conf" -O /opt/etc/opkg.conf
    wget --quiet "$entware_remote/ld-2.27.so" -O /opt/lib/ld-2.27.so
    wget --quiet "$entware_remote/libc-2.27.so" -O /opt/lib/libc-2.27.so
    wget --quiet "$entware_remote/libgcc_s.so.1" -O /opt/lib/libgcc_s.so.1
    wget --quiet "$entware_remote/libpthread-2.27.so" -O /opt/lib/libpthread-2.27.so

    cd /opt/lib
    chmod 755 ld-2.27.so
    ln -s ld-2.27.so "$dynamic_loader"
    ln -s libc-2.27.so libc.so.6
    ln -s libpthread-2.27.so libpthread.so.0

    log INFO "Installing basic Entware packages"
    /opt/bin/opkg update
    /opt/bin/opkg install entware-opt

    # Fix for multiuser environment
    chmod 777 /opt/tmp

    # Create basic administrative files
    if [[ -f /etc/passwd ]]; then
        ln -sf /etc/passwd /opt/etc/passwd
    else
        cp /opt/etc/passwd.1 /opt/etc/passwd
    fi

    if [[ -f /etc/group ]]; then
        ln -sf /etc/group /opt/etc/group
    else
        cp /opt/etc/group.1 /opt/etc/group
    fi

    if [[ -f /etc/shells ]]; then
        ln -sf /etc/shells /opt/etc/shells
    else
        cp /opt/etc/shells.1 /opt/etc/shells
    fi

    if [[ -f /etc/shadow ]]; then
        ln -sf /etc/shadow /opt/etc/shadow
    fi

    if [[ -f /etc/gshadow ]]; then
        ln -sf /etc/gshadow /opt/etc/gshadow
    fi

    if [[ -f /etc/localtime ]]; then
        ln -sf /etc/localtime /opt/etc/localtime
    fi

    # Remove existing PATH definitions where the Opkg binaries have
    # lesser priority over the system ones
    # shellcheck disable=SC2016
    if [[ -e /home/root/.bashrc ]]; then
        sed -i '/PATH="\?\$PATH:\/opt\/bin:\/opt\/sbin"\?$/d' /home/root/.bashrc
    fi

    # Add Opkg binaries to the PATH before all others
    if ! grep '.*PATH="\?/opt/bin:/opt/sbin:\$PATH"\?$' /home/root/.bashrc \
            | grep -v '^#' > /dev/null; then
        log INFO "Adding /opt/bin to the PATH"

        cat >> /home/root/.bashrc << 'SHELL'
# Path added by Toltec’s bootstrap
export PATH="/opt/bin:/opt/sbin:$PATH"
SHELL
    fi
}

# Add Toltec configuration to an existing Entware install
#
# Arguments: List of additional packages to install, one package per argument
toltec-install() {
    # Make sure that Opkg is configured to fetch the Toltec repo
    if ! grep "^src/gz\b.*\bhttps://toltec\.delab\.re/" /opt/etc/opkg.conf > /dev/null 2>&1; then
        log INFO "Installing the Toltec $toltec_branch repo"
        echo "src/gz toltec https://toltec.delab.re/$toltec_branch" >> /opt/etc/opkg.conf
        /opt/bin/opkg update
    fi

    # Make sure that the packages needed for wget TLS support are installed
    local tls_packages=()

    [[ ! -d /opt/etc/ssl/certs ]] && tls_packages+=(ca-certificates)
    [[ ! -f /opt/bin/wget ]] && tls_packages+=(wget)

    if [[ ${#tls_packages[@]} -gt 0 ]]; then
        /opt/bin/opkg update
        /opt/bin/opkg install "${tls_packages[@]}"
    fi

    # Installing additional packages
    if [[ $# -gt 0 ]]; then
        /opt/bin/opkg update
        /opt/bin/opkg install "$@"
    fi
}

# Print a log message
#
# Arguments:
#
# $1 - Log level: 'info', 'warn', 'error' or 'fatal'
# $2 - Message to show
log() {
    [ $# -ge 2 ] || throw "log() invalid usage: at least 2 parameters needed. Usage: log <type> <message_line>..."

    local log_type="$1"
    local fd=1 # To stdout
    local colored_prefix

    case "$log_type" in
        'info' | 'INFO' | 'Info') colored_prefix='\e[32mINFO:\e[0m  ' ;;
        'warn' | 'WARN' | 'Warn') colored_prefix='\e[33mWARN:\e[0m  ' ;;
        'error' | 'ERROR' | 'Error')
            colored_prefix='\e[31mERROR:\e[0m '
            fd=2
            ;;
        'fatal' | 'FATAL' | 'Fatal')
            colored_prefix='\e[31mFATAL:\e[0m '
            fd=2
            ;;
        *) throw "log() invalid usage: Unknown type: $log_type" ;;
    esac

    echo -e "${colored_prefix}$2" >&$fd
    # Extra lines to print indented
    shift 2
    local line
    for line in "$@"; do
        echo -e "       $line" >&$fd
    done
}

# Print fatal error and quit
#
# Arguments:
#
# $1 - Message to show
throw() {
    log FATAL "$@" \
        "" \
        "This script failed to install. If you can't solve the above" \
        "issue yourself, please report it at: " \
        "https://github.com/toltec-dev/toltec/issues " \
        "(Please also include these error logs to help solving the" \
        "problem faster. Thank you!)"
    exit 1
}

if [[ -d $entware_path ]]; then
    if [[ -d /opt ]] && files="$(ls -A -- /opt)" && [[ -n $files ]]; then
        log INFO "Entware is already installed and active"
    else
        log INFO "Re-enabling existing Entware install"
        entware-mount
    fi
else
    # Use a secure wget for installing Entware
    log INFO "Fetching secure wget"
    wget-bootstrap

    log INFO "Creating $entware_path and mounting to /opt"
    entware-mount
    entware-install
fi

toltec-install "$@"

if ! command -v opkg > /dev/null; then
    log WARN "Please run '. \$HOME/.bashrc' to use Toltec"
fi

if [[ ! -x $reenable_path ]]; then
    {
        echo "#!/usr/bin/env bash"
        declare -p entware_path systemd_mount_path
        declare -f entware-mount
        echo "entware-mount"
    } >> "$reenable_path"

    chmod +x "$reenable_path"
    log WARN "Use '$reenable_path' to re-enable Toltec after a system update"
fi
