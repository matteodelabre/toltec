# vim: set ft=sh:
pkgname=oxide
pkgdesc="Launcher application"
url=https://github.com/Eeems/oxide
pkgver=2.0~alpha-3
timestamp=2020-09-11T05:33Z
section=launchers
maintainer="raisjn <of.rajsn@gmail.com>"
license=MIT
depends=(xochitl)

image=qt:v1.1
source=(
    https://github.com/Eeems/oxide/archive/045c16943c82ba8c30ee22b507d8b710754a74e0.zip
    tarnish.service
)
sha256sums=(
    b119b8e2d57715089c6f67240933236e8d0c63e6a8bed947fc51e29afc6149e3
    SKIP
)

build() {
    sed -i 's/linux-oe-g++/linux-arm-gnueabihf-g++/' applications/*/*.pro
    make release
}

package() {
    cp -ar "$srcdir"/release/* "$pkgdir"

    install -D -m 644 -t "$pkgdir"/lib/systemd/system "$srcdir"/tarnish.service
    rm -r "$pkgdir"/etc/systemd

    rm "$pkgdir"/opt/etc/draft/xochitl.draft
    rm "$pkgdir"/opt/etc/draft/icons/xochitl.png
}

# Check whether a systemd unit exists and is enabled
#
# Arguments:
#
# $1 - Full name of the systemd unit, e.g. "xochitl.service"
#
# Exit code:
#
# 0 if the unit exists and is enabled, 1 otherwise
is-enabled() {
    # Note that we must invert the condition so that the exit code indicates
    # a failure when the unit exists and is disabled or when the unit does
    # not exist
    ! systemctl list-unit-files "$1" | awk "/$1/{exit \$2 == \"enabled\"}"
}

# Get a list of systemd units with which the given unit conflicts
#
# Arguments:
#
# $1 - Full name of the systemd unit, e.g. "xochitl.service"
#
# Output:
#
# List of conflicting units
get-conflicts() {
    systemctl show "$1" | awk -F'=' '/^Conflicts=/{print $2}'
}

configure() {
    systemctl daemon-reload

    if ! is-enabled "$pkgname.service"; then
        echo ""
        echo "Run the following command(s) to use $pkgname as your launcher"

        for conflict in $(get-conflicts "tarnish.service"); do
            if is-enabled "$conflict"; then
                echo "$ systemctl disable --now ${conflict/.service/}"
            fi
        done

        echo "$ systemctl enable --now tarnish"
        echo ""
    fi
}

preremove() {
    echo "Disabling $pkgname"
    systemctl disable --now tarnish
}

postremove() {
    systemctl daemon-reload
}
